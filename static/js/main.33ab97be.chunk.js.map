{"version":3,"sources":["components/header/Header.js","components/confirm-dialog/ConfirmDialog.js","components/alert-snackbar/AlertSnackbar.js","components/link/item/LinkCard.js","components/link/add/AddNewLinkCard.js","components/link/group/LinkGroup.js","components/tag/radio/ColoredRadio.js","components/tag/picker/TagPicker.js","components/link/form/LinkFormDialog.js","components/export-dialog/ExportDialog.js","components/import-dialog/ImportDialog.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","classes","makeStyles","theme","title","marginBottom","spacing","header","marginTop","search","width","button","marginLeft","useStyles","Fragment","Grid","className","container","item","xs","alignItems","justify","Typography","variant","gutterBottom","md","sm","TextField","label","onChange","event","onSearchKeyworkChanged","target","value","Button","color","onClick","onExportClicked","onImportClicked","onAddNewLinkFormClicked","ConfirmDialog","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","DialogContentText","message","DialogActions","onNegativeButtonClicked","negativeButton","onPositiveButtonClicked","positiveButton","AlertSnackbar","Snackbar","autoHideDuration","onClose","action","IconButton","size","aria-label","fontSize","LinkCard","link","padding","display","card","name","wordBreak","url","tag","backgroundColor","height","key","xl","lg","Card","direction","Box","flexGrow","onDeleteLinkClicked","onEditLinkClicked","text","onCopyToClipboardClicked","href","rel","component","AddNewLinkCard","opacity","minHeight","addButton","startIcon","onClicked","LinkGroup","data","sort","a","b","id","map","onAddNewLinkClicked","ColoredRadio","CustomRadio","withStyles","root","checked","Radio","selectedColor","toLowerCase","onChanged","TagPicker","colors","grey","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","useState","setSelectedColor","onColorSelected","LinkFormDialog","input","margin","section","marginRight","setId","setName","setUrl","setTag","useEffect","onNameChanged","onUrlChanged","Date","now","toString","ExportDialog","setData","multiline","rows","rowsMax","export","ImportDialog","description","descriptionIcon","descriptionText","isDataValid","setDataValid","onDataChanged","validateImportData","json","JSON","parse","Array","isArray","some","undefined","test","e","error","helperText","disabled","localStorage","setItem","App","createMuiTheme","palette","primary","main","getItem","stringify","links","setLinks","searchKeyword","setSearchKeyword","showCopiedToClipboard","setShowCopiedToClipboard","selectedLink","showConfirmDeleteLink","setShowConfirmDeleteLink","showLinkForm","setShowLinkForm","showExport","setShowExport","showImport","setShowImport","ThemeProvider","keyword","filter","includes","onEditLinkFormClicked","updatedLink","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.33ab97be.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Button, TextField, Typography } from '@material-ui/core'\n\nexport default function Header(props) {\n    const useStyles = makeStyles(theme => ({\n        title: {\n            marginBottom: theme.spacing(2)\n        },\n        header: {\n            marginTop: theme.spacing(4),\n            marginBottom: theme.spacing(1)\n        },\n        search: {\n            width: '100%'\n        },\n        button: {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n            marginLeft: theme.spacing(2)\n        }\n    }))\n    const classes = useStyles()\n    return (\n        <React.Fragment>\n            <Grid className={classes.header} container>\n                <Grid item xs={1} />\n                <Grid\n                    container\n                    alignItems=\"center\"\n                    justify=\"flex-start\"\n                    item\n                    xs={11}>\n                    <Typography\n                        className={classes.title}\n                        variant=\"h5\"\n                        gutterBottom>\n                        <b>{'Deep Link Generator'}</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={1} />\n                <Grid item md={6} sm={10} xs={10}>\n                    <TextField\n                        className={classes.search}\n                        label=\"Search\"\n                        variant=\"outlined\"\n                        onChange={event =>\n                            props.onSearchKeyworkChanged(event.target.value)\n                        }\n                    />\n                </Grid>\n                <Grid item sm={'auto'} xs={1} />\n                <Grid item md={'auto'} xs={1} />\n                <Grid container item md={4} sm={11} xs={10} justify=\"flex-end\">\n                    <Button\n                        title={'Export to JSON'}\n                        className={classes.button}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={props.onExportClicked}>\n                        {'Export'}\n                    </Button>\n                    <Button\n                        title={'Import from JSON'}\n                        className={classes.button}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={props.onImportClicked}>\n                        {'Import'}\n                    </Button>\n                    <Button\n                        title={'Add the new one'}\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={props.onAddNewLinkFormClicked}>\n                        {'Add'}\n                    </Button>\n                </Grid>\n                <Grid item xs={1} />\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nHeader.propTypes = {\n    onSearchKeyworkChanged: PropTypes.func,\n    onAddNewLinkFormClicked: PropTypes.func,\n    onExportClicked: PropTypes.func,\n    onImportClicked: PropTypes.func\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { Button } from '@material-ui/core'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nexport default function ConfirmDialog(props) {\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} fullWidth={true} maxWidth={'xs'}>\n                <DialogTitle>{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{props.message}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onNegativeButtonClicked}>\n                        {props.negativeButton}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={props.onPositiveButtonClicked}\n                        color=\"primary\">\n                        {props.positiveButton}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nConfirmDialog.propTypes = {\n    open: PropTypes.bool,\n    title: PropTypes.string,\n    message: PropTypes.string,\n    positiveButton: PropTypes.string,\n    onPositiveButtonClicked: PropTypes.func,\n    negativeButton: PropTypes.string,\n    onNegativeButtonClicked: PropTypes.func\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { IconButton, Snackbar } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\n\nexport default function AlertSnackbar(props) {\n    return (\n        <React.Fragment>\n            <Snackbar\n                open={props.open}\n                autoHideDuration={2000}\n                onClose={props.onClose}\n                message={props.message}\n                action={\n                    <IconButton\n                        size=\"small\"\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        onClick={props.onClose}>\n                        <CloseIcon fontSize=\"small\" />\n                    </IconButton>\n                }\n            />\n        </React.Fragment>\n    )\n}\n\nAlertSnackbar.propTypes = {\n    open: PropTypes.bool,\n    message: PropTypes.string,\n    onClose: PropTypes.func\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { Card, Grid, IconButton, Typography, Box } from '@material-ui/core'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined'\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined'\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nexport default function LinkCard(props) {\n    const useStyles = makeStyles(theme => ({\n        link: {\n            padding: theme.spacing(1),\n            display: 'grid'\n        },\n        card: {\n            padding: theme.spacing(3)\n        },\n        name: {\n            wordBreak: 'break-word'\n        },\n        url: {\n            wordBreak: 'break-all'\n        },\n        tag: {\n            marginTop: theme.spacing(2),\n            backgroundColor: props.link.tag,\n            width: theme.spacing(5),\n            height: theme.spacing(0.5)\n        }\n    }))\n    const classes = useStyles()\n    return (\n        <React.Fragment>\n            <Grid\n                className={classes.link}\n                key={props.link.name}\n                item\n                xl={3}\n                lg={4}\n                md={6}\n                xs={12}>\n                <Card className={classes.card}>\n                    <Grid container direction=\"column\">\n                        <Grid\n                            justify=\"flex-end\"\n                            container\n                            alignItems=\"center\"\n                            direction=\"row\">\n                            <div className={classes.tag} />\n                            <Box flexGrow={1} />\n                            <IconButton\n                                title={'Delete'}\n                                onClick={() =>\n                                    props.onDeleteLinkClicked(props.link)\n                                }>\n                                <DeleteOutlineIcon />\n                            </IconButton>\n                            <IconButton\n                                title={'Edit'}\n                                onClick={() => {\n                                    props.onEditLinkClicked(props.link)\n                                }}>\n                                <EditOutlinedIcon />\n                            </IconButton>\n                            <CopyToClipboard text={props.link.url}>\n                                <IconButton\n                                    title={'Copy URL'}\n                                    onClick={() =>\n                                        props.onCopyToClipboardClicked(\n                                            props.link\n                                        )\n                                    }>\n                                    <FileCopyOutlinedIcon />\n                                </IconButton>\n                            </CopyToClipboard>\n                            <a\n                                href={props.link.url}\n                                target={'_blank'}\n                                rel=\"noopener noreferrer\">\n                                <IconButton title={'Open URL'}>\n                                    <LaunchIcon />\n                                </IconButton>\n                            </a>\n                        </Grid>\n                        <Typography\n                            className={classes.name}\n                            variant=\"subtitle1\"\n                            component=\"h6\">\n                            <b>{props.link.name}</b>\n                        </Typography>\n                        <Typography\n                            className={classes.url}\n                            variant=\"body2\"\n                            component=\"p\">\n                            {props.link.url}\n                        </Typography>\n                    </Grid>\n                </Card>\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nLinkCard.propTypes = {\n    link: PropTypes.object,\n    onEditLinkClicked: PropTypes.func,\n    onDeleteLinkClicked: PropTypes.func,\n    onCopyToClipboardClicked: PropTypes.func\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, Grid, Button } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\n\nexport default function AddNewLinkCard(props) {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            opacity: '0.4',\n            padding: theme.spacing(1),\n            minHeight: theme.spacing(16),\n            display: 'grid'\n        },\n        addButton: {\n            opacity: '0.6',\n            width: '100%',\n            height: '100%'\n        }\n    }))\n    const classes = useStyles()\n    return (\n        <React.Fragment>\n            <Grid\n                className={classes.container}\n                item\n                xl={3}\n                lg={4}\n                md={6}\n                xs={12}>\n                <Card>\n                    <Button\n                        title={'Add the new one'}\n                        className={classes.addButton}\n                        color=\"default\"\n                        size={'large'}\n                        startIcon={<AddIcon />}\n                        onClick={props.onClicked}>\n                        {'Add the new one'}\n                    </Button>\n                </Card>\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nAddNewLinkCard.propTypes = {\n    onClicked: PropTypes.func\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { Grid } from '@material-ui/core'\nimport LinkCard from '../item/LinkCard'\nimport AddNewLinkCard from '../add/AddNewLinkCard'\n\nexport default function LinkGroup(props) {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(1)\n        }\n    }))\n    const sortById = (a, b) => {\n        if (a.id < b.id) {\n            return 1\n        } else if (a.id > b.id) {\n            return -1\n        } else {\n            return 0\n        }\n    }\n    const classes = useStyles()\n    return (\n        <React.Fragment>\n            <Grid className={classes.container} container>\n                {props.data.sort(sortById).map(link => {\n                    return (\n                        <LinkCard\n                            key={link.id}\n                            link={link}\n                            onEditLinkClicked={props.onEditLinkClicked}\n                            onDeleteLinkClicked={props.onDeleteLinkClicked}\n                            onCopyToClipboardClicked={\n                                props.onCopyToClipboardClicked\n                            }\n                        />\n                    )\n                })}\n                <AddNewLinkCard onClicked={props.onAddNewLinkClicked} />\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nLinkGroup.propTypes = {\n    data: PropTypes.array,\n    onAddNewLinkClicked: PropTypes.func,\n    onEditLinkClicked: PropTypes.func,\n    onDeleteLinkClicked: PropTypes.func,\n    onCopyToClipboardClicked: PropTypes.func\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Radio } from '@material-ui/core'\n\nexport default function ColoredRadio(props) {\n    const CustomRadio = withStyles({\n        root: {\n            color: props.color,\n            '&$checked': {\n                color: props.color\n            }\n        },\n        checked: {}\n    })(props => <Radio color=\"default\" {...props} />)\n    return (\n        <CustomRadio\n            title={props.color}\n            checked={\n                props.selectedColor.toLowerCase() === props.color.toLowerCase()\n            }\n            value={props.color}\n            key={props.color}\n            onChange={props.onChanged}\n        />\n    )\n}\n\nColoredRadio.propTypes = {\n    color: PropTypes.string,\n    selectedColor: PropTypes.string,\n    onChanged: PropTypes.func\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport {\n    red,\n    pink,\n    purple,\n    deepPurple,\n    indigo,\n    blue,\n    lightBlue,\n    cyan,\n    teal,\n    green,\n    lightGreen,\n    lime,\n    yellow,\n    amber,\n    orange,\n    grey\n} from '@material-ui/core/colors'\nimport { Grid } from '@material-ui/core'\nimport ColoredRadio from '../radio/ColoredRadio'\n\nexport default function TagPicker(props) {\n    const colors = [\n        grey[500],\n        red[500],\n        pink[500],\n        purple[500],\n        deepPurple[500],\n        indigo[500],\n        blue[500],\n        lightBlue[500],\n        cyan[500],\n        teal[500],\n        green[500],\n        lightGreen[500],\n        lime[500],\n        yellow[500],\n        amber[500],\n        orange[500]\n    ]\n    const [selectedColor, setSelectedColor] = useState(\n        props.selectedColor || colors[0]\n    )\n    const onColorSelected = event => {\n        const selectedColor = event.target.value\n        setSelectedColor(selectedColor)\n        props.onChanged(selectedColor)\n    }\n    return (\n        <React.Fragment>\n            <Grid container>\n                {colors.map(color => {\n                    return (\n                        <ColoredRadio\n                            key={color}\n                            color={color}\n                            selectedColor={selectedColor}\n                            onChanged={onColorSelected}\n                        />\n                    )\n                })}\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nTagPicker.propTypes = {\n    selectedColor: PropTypes.string,\n    onChanged: PropTypes.func\n}\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { TextField, Button, Grid, Typography } from '@material-ui/core'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport TagPicker from '../../tag/picker/TagPicker'\nimport { grey } from '@material-ui/core/colors'\n\nexport default function LinkFormDialog(props) {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(2)\n        },\n        input: {\n            margin: theme.spacing(1)\n        },\n        section: {\n            marginTop: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1)\n        }\n    }))\n    const classes = useStyles()\n    const [id, setId] = useState(props.id || '')\n    const [name, setName] = useState(props.name || '')\n    const [url, setUrl] = useState(props.url || '')\n    const [tag, setTag] = useState(props.tag || grey[500])\n    useEffect(() => setId(props.id || ''), [props.id])\n    useEffect(() => setName(props.name || ''), [props.name])\n    useEffect(() => setUrl(props.url || ''), [props.url])\n    useEffect(() => setTag(props.tag || grey[500]), [props.tag])\n\n    const onNameChanged = name => {\n        setName(name)\n    }\n\n    const onUrlChanged = url => {\n        setUrl(url)\n    }\n\n    const onTagChanged = tag => {\n        setTag(tag)\n    }\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} fullWidth={true} maxWidth={'xs'}>\n                <DialogContent>\n                    <Grid\n                        className={classes.container}\n                        container\n                        direction=\"column\">\n                        <TextField\n                            className={classes.input}\n                            label=\"Name\"\n                            variant=\"outlined\"\n                            value={name}\n                            onChange={event => {\n                                onNameChanged(event.target.value)\n                            }}\n                        />\n                        <TextField\n                            className={classes.input}\n                            label=\"URL\"\n                            variant=\"outlined\"\n                            value={url}\n                            onChange={event => {\n                                onUrlChanged(event.target.value)\n                            }}\n                        />\n                        <Typography\n                            className={classes.section}\n                            variant=\"subtitle1\">\n                            <b>{'Tag Color'}</b>\n                        </Typography>\n                        <TagPicker\n                            selectedColor={tag}\n                            onChanged={onTagChanged}\n                        />\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onNegativeButtonClicked}>\n                        {props.negativeButton}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            props.onPositiveButtonClicked({\n                                id: id || Date.now().toString(),\n                                name,\n                                url,\n                                tag\n                            })\n                        }}\n                        color=\"primary\">\n                        {props.positiveButton}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nLinkFormDialog.propTypes = {\n    open: PropTypes.bool,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    url: PropTypes.string,\n    tag: PropTypes.string,\n    positiveButton: PropTypes.string,\n    onPositiveButtonClicked: PropTypes.func,\n    negativeButton: PropTypes.string,\n    onNegativeButtonClicked: PropTypes.func\n}\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button, TextField, Grid } from '@material-ui/core'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nexport default function ExportDialog(props) {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(2)\n        },\n        data: {\n            margin: theme.spacing(1)\n        }\n    }))\n    const classes = useStyles()\n    const [data, setData] = useState(props.data || '')\n    useEffect(() => setData(props.data || ''), [props.data])\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} fullWidth={true} maxWidth={'md'}>\n                <DialogContent>\n                    <Grid\n                        className={classes.container}\n                        container\n                        direction=\"column\">\n                        <TextField\n                            className={classes.data}\n                            label={props.title}\n                            variant=\"outlined\"\n                            value={data}\n                            multiline\n                            rows={8}\n                            rowsMax={16}\n                        />\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onNegativeButtonClicked}>\n                        {'Close'}\n                    </Button>\n                    <CopyToClipboard text={props.export}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={props.onPositiveButtonClicked}\n                            color=\"primary\">\n                            {'Copy'}\n                        </Button>\n                    </CopyToClipboard>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nExportDialog.propTypes = {\n    open: PropTypes.bool,\n    title: PropTypes.string,\n    data: PropTypes.string,\n    onPositiveButtonClicked: PropTypes.func,\n    onNegativeButtonClicked: PropTypes.func\n}\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport 'fontsource-roboto'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button, TextField, Grid, Typography } from '@material-ui/core'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\n\nexport default function ImportDialog(props) {\n    const useStyles = makeStyles(theme => ({\n        description: {\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(3),\n            marginRight: theme.spacing(3)\n        },\n        descriptionIcon: {\n            marginRight: theme.spacing(1)\n        },\n        descriptionText: {},\n        container: {\n            padding: theme.spacing(2)\n        },\n        data: {\n            margin: theme.spacing(1)\n        }\n    }))\n    const classes = useStyles()\n    const [data, setData] = useState(props.data || '')\n    const [isDataValid, setDataValid] = useState(false)\n\n    useEffect(() => onDataChanged(props.data || ''), [props.data])\n\n    const onDataChanged = data => {\n        setData(data)\n        setDataValid(validateImportData(data))\n    }\n    const validateImportData = data => {\n        try {\n            const json = JSON.parse(data)\n            if (!Array.isArray(json)) {\n                return false\n            }\n            if (\n                json.some(\n                    item =>\n                        item.id == undefined ||\n                        item.name == undefined ||\n                        item.url == undefined ||\n                        item.tag == undefined ||\n                        !/^#([0-9a-f]{6})?$/i.test(item.tag)\n                )\n            ) {\n                return false\n            }\n            return true\n        } catch (e) {\n            return false\n        }\n    }\n    const onImportDataClicked = () => {\n        localStorage.setItem('links', data)\n        props.onPositiveButtonClicked()\n    }\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} fullWidth={true} maxWidth={'md'}>\n                <DialogContent>\n                    <Grid\n                        className={classes.description}\n                        container\n                        direction=\"row\">\n                        <ErrorOutlineIcon className={classes.descriptionIcon} />\n                        <Typography className={classes.descriptionText}>\n                            {\n                                'To import the data, existing data will be replaced with the new one.'\n                            }\n                        </Typography>\n                    </Grid>\n                    <Grid\n                        className={classes.container}\n                        container\n                        direction=\"column\">\n                        <TextField\n                            className={classes.data}\n                            label={props.title}\n                            variant=\"outlined\"\n                            value={data}\n                            multiline\n                            rows={8}\n                            rowsMax={16}\n                            error={!isDataValid}\n                            helperText=\"Invalid JSON Data\"\n                            onChange={event =>\n                                onDataChanged(event.target.value)\n                            }\n                        />\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onNegativeButtonClicked}>\n                        {'Close'}\n                    </Button>\n                    <Button\n                        disabled={!isDataValid}\n                        variant=\"contained\"\n                        onClick={onImportDataClicked}\n                        color=\"primary\">\n                        {'Import'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nImportDialog.propTypes = {\n    open: PropTypes.bool,\n    title: PropTypes.string,\n    data: PropTypes.string,\n    onPositiveButtonClicked: PropTypes.func,\n    onNegativeButtonClicked: PropTypes.func\n}\n","import React, { useState, useEffect } from 'react'\nimport 'fontsource-roboto'\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport { teal } from '@material-ui/core/colors'\nimport Header from './components/header/Header'\nimport ConfirmDialog from './components/confirm-dialog/ConfirmDialog'\nimport AlertSnackbar from './components/alert-snackbar/AlertSnackbar'\nimport LinkGroup from './components/link/group/LinkGroup'\nimport LinkFormDialog from './components/link/form/LinkFormDialog'\nimport ExportDialog from './components/export-dialog/ExportDialog'\nimport ImportDialog from './components/import-dialog/ImportDialog'\n\nexport default function App() {\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: teal[500]\n            }\n        }\n    })\n\n    const [links, setLinks] = useState(\n        JSON.parse(\n            localStorage.getItem('links') ||\n                JSON.stringify([\n                    {\n                        id: '1601142258869',\n                        name: '[Sample] Facebook Page on Android',\n                        url: 'fb://page/577361412281379',\n                        tag: '#2196f3'\n                    },\n                    {\n                        id: '1601142258870',\n                        name: '[Sample] Facebook Page on iOS',\n                        url: 'fb://profile/577361412281379',\n                        tag: '#2196f3'\n                    }\n                ])\n        )\n    )\n\n    const [searchKeyword, setSearchKeyword] = useState('')\n\n    const [showCopiedToClipboard, setShowCopiedToClipboard] = useState(false)\n\n    const [showConfirmDeleteLink, setShowConfirmDeleteLink] = useState({\n        open: false,\n        selectedLink: null\n    })\n\n    const [showLinkForm, setShowLinkForm] = useState({\n        open: false,\n        id: null,\n        name: null,\n        url: null,\n        tag: null,\n        positiveButton: null,\n        negativeButton: null\n    })\n\n    const [showExport, setShowExport] = useState({\n        open: false,\n        title: null,\n        data: null,\n        positiveButton: null,\n        negativeButton: null\n    })\n\n    const [showImport, setShowImport] = useState({\n        open: false,\n        title: null,\n        data: null,\n        positiveButton: null,\n        negativeButton: null\n    })\n\n    useEffect(() => {\n        localStorage.setItem('links', JSON.stringify(links))\n    }, [links])\n\n    const onSearchKeyworkChanged = keyword => {\n        setSearchKeyword(keyword)\n    }\n\n    const onCopyToClipboardClicked = () => {\n        setShowCopiedToClipboard(true)\n    }\n\n    const onDismissCopyToClipboardMessage = () => {\n        setShowCopiedToClipboard(false)\n    }\n\n    const onDeleteLinkClicked = selectedLink => {\n        setShowConfirmDeleteLink({\n            open: true,\n            selectedLink: selectedLink\n        })\n    }\n\n    const onDeleteLinkConfirmed = selectedLink => {\n        setLinks(links.filter(link => link !== selectedLink))\n        setShowConfirmDeleteLink({\n            open: false,\n            selectedLink: null\n        })\n    }\n\n    const onDeleteLinkCanceled = () => {\n        setShowConfirmDeleteLink({\n            open: false,\n            selectedLink: null\n        })\n    }\n\n    const onAddNewLinkFormClicked = () => {\n        setShowLinkForm({\n            open: true,\n            id: null,\n            name: null,\n            url: null,\n            tag: null,\n            positiveButton: 'Add',\n            negativeButton: 'Close'\n        })\n    }\n\n    const onEditLinkFormClicked = link => {\n        setShowLinkForm({\n            open: true,\n            ...link,\n            positiveButton: 'Update',\n            negativeButton: 'Close'\n        })\n    }\n\n    const onUpdateLinkFormClicked = updatedLink => {\n        if (links.find(link => link.id === updatedLink.id)) {\n            setLinks(\n                links.map(link => {\n                    if (link.id === updatedLink.id) {\n                        return updatedLink\n                    } else {\n                        return link\n                    }\n                })\n            )\n        } else {\n            setLinks([...links, updatedLink])\n        }\n        setShowLinkForm({\n            open: false,\n            id: '',\n            name: '',\n            url: '',\n            tag: ''\n        })\n    }\n\n    const onCloseLinkFormClicked = () => {\n        setShowLinkForm({\n            ...showLinkForm,\n            open: false\n        })\n    }\n\n    const onExportClicked = () => {\n        setShowExport({\n            open: true,\n            title: 'Export Data',\n            data: JSON.stringify(links, null, 4) || '[]'\n        })\n    }\n\n    const onImportClicked = () => {\n        setShowImport({\n            open: true,\n            title: 'Import Data',\n            data: ''\n        })\n    }\n\n    const onCopyExportDataClicked = () => {\n        setShowCopiedToClipboard(true)\n    }\n\n    const onCloseExportClicked = () => {\n        setShowExport({\n            open: false,\n            title: null,\n            json: null\n        })\n    }\n\n    const onImportDataClicked = () => {\n        setLinks(JSON.parse(localStorage.getItem('links') || '[]'))\n        setShowImport({\n            open: false,\n            title: null,\n            json: null\n        })\n    }\n\n    const onCloseImportClicked = () => {\n        setShowImport({\n            open: false,\n            title: null,\n            json: null\n        })\n    }\n\n    return (\n        <div className=\"app\">\n            <ThemeProvider theme={theme}>\n                <Header\n                    onSearchKeyworkChanged={onSearchKeyworkChanged}\n                    onAddNewLinkFormClicked={onAddNewLinkFormClicked}\n                    onExportClicked={onExportClicked}\n                    onImportClicked={onImportClicked}\n                />\n                <LinkGroup\n                    data={links.filter(link => {\n                        return (\n                            link.name.includes(searchKeyword) ||\n                            link.url.includes(searchKeyword)\n                        )\n                    })}\n                    onAddNewLinkClicked={onAddNewLinkFormClicked}\n                    onEditLinkClicked={link => onEditLinkFormClicked(link)}\n                    onDeleteLinkClicked={link => onDeleteLinkClicked(link)}\n                    onCopyToClipboardClicked={link =>\n                        onCopyToClipboardClicked()\n                    }\n                />\n                <LinkFormDialog\n                    open={showLinkForm.open}\n                    id={showLinkForm.id}\n                    name={showLinkForm.name}\n                    url={showLinkForm.url}\n                    tag={showLinkForm.tag}\n                    positiveButton={showLinkForm.positiveButton}\n                    onPositiveButtonClicked={link =>\n                        onUpdateLinkFormClicked(link)\n                    }\n                    negativeButton={showLinkForm.negativeButton}\n                    onNegativeButtonClicked={onCloseLinkFormClicked}\n                />\n                <AlertSnackbar\n                    open={showCopiedToClipboard}\n                    onClose={onDismissCopyToClipboardMessage}\n                    message={'Copied URL to clipboard'}\n                />\n                <ConfirmDialog\n                    open={showConfirmDeleteLink.open}\n                    title={'Delete this link?'}\n                    message={\"This action can't undo\"}\n                    positiveButton={'Confirm'}\n                    onPositiveButtonClicked={() =>\n                        onDeleteLinkConfirmed(\n                            showConfirmDeleteLink.selectedLink\n                        )\n                    }\n                    negativeButton={'Cancel'}\n                    onNegativeButtonClicked={onDeleteLinkCanceled}\n                />\n                <ExportDialog\n                    open={showExport.open}\n                    title={showExport.title}\n                    data={showExport.data}\n                    onPositiveButtonClicked={onCopyExportDataClicked}\n                    onNegativeButtonClicked={onCloseExportClicked}\n                />\n                <ImportDialog\n                    open={showImport.open}\n                    title={showImport.title}\n                    data={showImport.data}\n                    onPositiveButtonClicked={onImportDataClicked}\n                    onNegativeButtonClicked={onCloseImportClicked}\n                />\n            </ThemeProvider>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}